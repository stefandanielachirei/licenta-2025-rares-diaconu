de pus pe hartie functionalitatile si ce vreau sa mai fac pe backend
de adaugat cartile in baza de date si legatura cu email-ul pentru a putea face in fe
asta dupa ce am facut backend-ul macar partea de carti de facut pagina de login cu tot cu register si de vazut ce voi face in backend luata de la pos
de facut un design si de pus functionalitatile pe hartie cam ce vreau sa implementez


o sa fie in mare un app in care o sa fie o pagina care se deschide cu cartile disponibile de pe site, un buton de search pentru alte carti. apoi un buton de to_read care va
adauga cartea intr-o lista care va fi afisata pe o alta pagina la cele de to_read. daca apasa pe carte va fi poza sus cu titlul sub si autorul cu isbn si apoi review-uri la
acea carte si undeva in stanga sau dreapta review-ului va fi analiza sentimentelor facuta cu nlp pe acel review, in cealalta parte va fi rezumatul review-ului facut cu 
nlp si mai sus de review-uri trebuie sa fie si rezumatul cartii facut tot cu nlp.
meniul va fi ca la pos in partea stanga unde vor fi cartile, apoi to read, change password, delete account, log out
la admin va fi stergere user si introducere carti, review-uri(poate)

chestii pentru luni:
	- de facut pagina de admin in fe toata: - facut
		- prima pagina ca cea de la pos un pic modificata cu previous si next la paginare si butoanele altundeva : create, update, get * 2, delete - facut
		- a doua va fi cu review-uri tot cu paginarea ca la prima : get, delete - facut
		- a treia va fi cu delete account cu cele 2 cereri spre backend si auth - facut
		- a patra cu logout - facut
	- sa se faca paginile de la user: carti, to_read, read, change_password, delete account cu cele 2 cereri spre backend si auth, log out - facut
	- paginile de change password, delete account cu cele 2 cereri spre backend si auth, log out - facut
	- de facut pagina de carti cu paginarea si cu poza(asta este diferit fata de admin) si cu posibilitatea de a o pune la read si to_read - facut
	- de facut pagina de read care contine si un buton add review catre o alta pagina unde se adauga review-ul - facut
	- de facut pagina de to_read - facut
	- de modificat isbn-urile din books.csv ca sa fie cele bune de pe openlibrary pentru a adauga mai multe carti - facut
	- la carti la admin de refacut functia din backend, facut una noua pentru admin - facut
	- de facut pe pagina cu carti la fiecare carte sumarurile review-urilor paginate cele mai mici de x tokeni cu cel antrenat, cele mai mari cu unul importat - facut in backend
	- cand apasa pe coperta sau titlu sa se duca pe pagina cartii unde vor fi toate review-urile paginate si in stanga va fi sentiment analysis la fiecare review si
similaritatea cumva sa fie folosita la final intre review-uri
	- cu review-urile la carti sumarizate si sa poata apasa pe carte sa il duca pe pagina cartii unde vor fi review-urile complete si cu sentiment analysis
	- review-ul propriu sa fie primul pe pagina principala si a cartii la review-uri si rezumate
	- similaritarea - sa fie review-urile filtrate dupa cat de similare sunt - un top 5 pe alta pagina posibil
	- pune nginx la final inapoi
idm_db:
    image: postgres:14
    container_name: idm_db
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: idm_db
    volumes:
      - db_data2:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d idm_db"]
      interval: 5s
      retries: 5
      timeout: 5s
    networks:
      - mynetwork

  idm_service:
    build:
      context: ./auth
      dockerfile: Dockerfile
    container_name: idm_service
    ports:
      - "50051:50051"
    environment: 
      - DATABASE_URL=postgresql://user:password@idm_db:5432/idm_db
    depends_on:
      idm_db:
        condition: service_healthy
    networks:
      - mynetwork

  idm_api:
    build:
      context: ./auth
      dockerfile: Dockerfile.api
    container_name: idm_api
    ports:
      - "8080:8080"
    depends_on:
      idm_db:
        condition: service_healthy
    networks:
      - mynetwork

  frontend:
    build:
      context: ./goodreads
      dockerfile: Dockerfile
    container_name: nextjs_app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - fastapi_app
    networks:
      - mynetwork


  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./goodreads/out:/usr/share/nginx/html
    ports:
      - "80:80"
    depends_on:
      - fastapi_app
    networks:
      - mynetwork
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  nlp_model:
    build: ./nlp_model
    container_name: nlp_model
    volumes:
      - ./nlp_model:/app
    ports:
      - "8001:8001"
    depends_on:
      - fastapi_app
    networks:
      - mynetwork
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]